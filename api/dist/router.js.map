{"version":3,"sources":["../src/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","next","status","json","version","post","array","files","fileModels","each","fileObject","newFile","initWithObject","toJSON","push","length","collection","insertMany","err","result","error","message","fileId","params","id","console","log","find","_id","toArray","fileName","filePath","join","download"],"mappings":"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","file":"router.js","sourcesContent":["import path from 'path';\r\nimport _ from 'lodash';\r\nimport File from './models/file';\r\nimport {ObjectID} from 'mongodb';\r\n\r\nclass AppRouter {\r\nconstructor(app) {\r\n    this.app = app;\r\n    this.setupRouters();\r\n}\r\n\r\nsetupRouters() {\r\n    const app = this.app;\r\n    const db = app.get('db');\r\n    const uploadDir = app.get('storageDir');\r\n    const upload = app.get('upload');\r\n    app.get('/', (req, res, next) => {\r\n        return res.status(200).json({\r\n            version: 'works'\r\n        });\r\n    });\r\n    \r\n    // Upload routing\r\n    app.post('/', upload.array('files'), (req, res, next) => {\r\n       const files = _.get(req, 'files', []);\r\n       let fileModels = [];\r\n\r\n       _.each(files, (fileObject) => {\r\n        const newFile = new File(app).initWithObject(fileObject).toJSON();\r\n        fileModels.push(newFile);\r\n       });\r\n       if(fileModels.length) {\r\n        db.collection('files').insertMany(fileModels, (err, result) => {\r\n            if(err) {\r\n                return res.status(503).json({\r\n                    error: {\r\n                        message: 'Unable saved your files',\r\n                    }\r\n                })\r\n            }\r\n            return res.json({\r\n                files: fileModels\r\n            })\r\n        })\r\n       }\r\n       else {\r\n            return res.status(503).json({\r\n                error: {message: 'Files upload is required'}\r\n            });\r\n       }\r\n    });\r\n\r\n    // Dowload routing\r\n    app.get('/:id', (req, res, next) => {\r\n        const fileId = req.params.id;\r\n        \r\n        console.log(\"fileId\",fileId);\r\n        db.collection('files').find({_id: ObjectID(fileId)}).toArray((err, result) => {\r\n            const fileName = _.get(result, '[0].name');\r\n            if(err || !fileName) {\r\n                return res.status(404).json({\r\n                    error: {\r\n                        message: 'File not found'\r\n                    }\r\n                })\r\n            }\r\n            const filePath = path.join(uploadDir, fileName);\r\n            \r\n            return res.download(filePath, fileName, (err) => {\r\n                if(err) {\r\n                    return res.status(404).json({\r\n                        error: {\r\n                            message: 'File not found'\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    console.log(\"File is downloaded\");\r\n                }\r\n            })\r\n        })\r\n    });\r\n}\r\n}\r\n\r\nexport default AppRouter;"]}